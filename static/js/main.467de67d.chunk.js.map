{"version":3,"sources":["Movies.js","Trending.js","App.js","serviceWorker.js","index.js","filmy.jpeg"],"names":["Movies","props","results","map","item","react_default","a","createElement","className","key","id","title","name","poster_path","src","concat","alt","style","width","vote_average","Trending","trending","popular","profile_path","App","state","movies","search","handleChange","e","value","target","toLowerCase","console","log","fetch","then","response","json","data","_this","setState","_this2","this","overview","Fragment","href","filmy","htmlFor","onChange","type","placeholder","src_Movies","src_Trending","active","handleClick","Click","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.467de67d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\n\r\nconst Movies = (props) => {\r\n\r\n\r\n    const results = (props.results || []).map(item => (\r\n\r\n        < div className=\"movies_div\" key={item.id} >\r\n            <h4>{item.title || item.name} </h4>{\r\n\r\n                item.poster_path !== null ? <img src={`https://image.tmdb.org/t/p/w185${item.poster_path}`} alt=\"poster of movie\" /> : <img src=\"https://www.slodkiprzystanek.pl/img/no-photo-available.png\" alt=\"empty\" style={{ width: 185 }} />\r\n            }\r\n            <p>Ocena internautów: {item.vote_average}</p>\r\n\r\n        </div >\r\n\r\n    ))\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container_movies\">\r\n\r\n            {results}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Movies","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Trending = (props) => {\r\n\r\n\r\n    const trending = (props.popular).map(item => (\r\n\r\n\r\n        < div className=\"div_trend\" key={item.id} >\r\n            <h4>{item.name || item.title}</h4>{\r\n                item.poster_path !== null || item.profile_path !== null ? <img src={`https://image.tmdb.org/t/p/w185${item.poster_path}`} alt=\"poster of movie\" /> : <img src=\"https://www.slodkiprzystanek.pl/img/no-photo-available.png\" alt=\"empty\" style={{ width: 185 }} />\r\n            }\r\n\r\n            {/* <button className=\"button\" onClick={props.handleClick}>{props.active ? \"OPIS FILMU\" : \"SCHOWAJ\"}</button>\r\n            {\r\n                props.active ? <p></p> : <p>{item.overview}</p>\r\n            } */}\r\n\r\n\r\n\r\n        </ div >\r\n\r\n\r\n    ))\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"trend\">\r\n\r\n            {trending}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Trending\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movies from \"./Movies\"\nimport Trending from \"./Trending\"\nimport filmy from \"./filmy.jpeg\"\n\n\n\n\nclass App extends Component {\n\n  state = {\n    movies: [],\n    search: \"\",\n    trending: [],\n    // active: \"false\",\n\n  }\n\n  // Click = () => {\n  //   console.log(\"działa\")\n\n\n  //   this.setState({\n  //     active: !this.state.active\n  //   })\n\n\n  // }\n\n\n\n\n  handleChange = (e) => {\n\n    const value = e.target.value.toLowerCase()\n    const ApiKey = \"5259c8949c37b92e4bfb71d3a1948220\"\n    console.log(value)\n    fetch(`https://api.themoviedb.org/3/search/multi?api_key=${ApiKey}&query=${value}`)\n\n      .then(response => response.json())\n      .then(data => {\n        console.log(data.results)\n\n        this.setState({\n          movies: data.results,\n          search: value,\n        })\n\n      })\n  }\n\n\n\n\n  componentDidMount() {\n    fetch(`https://api.themoviedb.org/3/trending/all/week?api_key=5259c8949c37b92e4bfb71d3a1948220`)\n      .then(response => response.json())\n\n      .then(data => {\n        console.log(data.results)\n        console.log(data.results[0].id)\n        console.log(data.results[1].overview)\n\n\n\n\n        this.setState({\n          trending: data.results,\n\n        })\n\n\n      })\n\n  }\n\n\n  render() {\n\n\n\n\n    return (\n      <>\n        <div className=\"header\">\n          <nav className=\"navigation\">\n            <a href=\"#popular\" className=\"link\">Najpopularniejsze filmy tygodnia</a>\n          </nav>\n          <img className=\"logo\" src={filmy} alt=\"logo\" />\n          <h1 className=\"title\">MOVIES BROWSER</h1>\n        </div>\n        <div className=\"search\">\n          <label htmlFor=\"search\"><strong>Wyszukaj film</strong></label>\n          <input className=\"input\" onChange={this.handleChange} type=\"text\" placeholder=\"Wpisz tytuł filmu\" id=\"search\" value={this.state.search}></input>\n        </div>\n        <div >\n          <h4 >\n            <Movies results={this.state.movies} />\n          </h4>\n        </div>\n        <div >\n          <strong>\n            Najpopularniejsze filmy w tygodniu:\n          </strong>\n          <h4 id=\"popular\">\n\n            <Trending active={this.state.active} handleClick={this.Click} popular={this.state.trending} />\n\n\n\n\n          </h4>\n        </div>\n      </>\n    )\n\n\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/filmy.c25a838a.jpeg\";"],"sourceRoot":""}